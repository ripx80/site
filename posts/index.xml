<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on ripx80 onexec</title><link>https://ripx80.de/posts/</link><description>Recent content in Posts on ripx80 onexec</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>ripx80</copyright><lastBuildDate>Thu, 27 Jun 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://ripx80.de/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>wireguard mtu calculation</title><link>https://ripx80.de/posts/06-wg-mtu/</link><pubDate>Thu, 27 Jun 2024 00:00:00 +0000</pubDate><guid>https://ripx80.de/posts/06-wg-mtu/</guid><description>short when the wireguard protocol is used the mtu size is reduced inside the tunnel. this can be a problem when your isp cut off your mtu size and you use large packets like the ssh handshake inside a wireguard connection. this results in a connection that sometimes work and sometimes not. to enable a stable connection within wireguard and to avoid isp-related problems, the mtu should be set to 1380 bytes.</description></item><item><title>nftables - advanced router</title><link>https://ripx80.de/posts/05-nftables-router/</link><pubDate>Fri, 31 May 2024 00:00:00 +0000</pubDate><guid>https://ripx80.de/posts/05-nftables-router/</guid><description>short this post deals with some advanced rules and configurations to build router based on the previous post about nftables - basics. the focus is in general on nftables but the whole thing is build on a nixos system.
if you need additional ideas or use cases? take a look at the blog (comming soon) post.
system: x86_64 kernel: 6.7.9 nixos: 23.11 nftables: 1.0.9 libressl-3.8.2-nc (netcat) wireguard nixos modules:
firewall firewall-nftables nftables nft 1 2 3 4 5 nft flush ruleset # clear, flush the entire ruleset nft list counters # list named counters # nft syntax for the logging statement nft add rule inet fw services iifname wg0 tcp dport 22 ct state new log prefix \&amp;#34;[nftables] new ssh accepted: \&amp;#34; accept comment &amp;#34;allow and log ssh&amp;#34; network struct the general struct of the network is a central router in the internet, reachable over its public ip (example here: 80.</description></item><item><title>nftables - basics</title><link>https://ripx80.de/posts/04-nftables/</link><pubDate>Mon, 15 Apr 2024 00:00:00 +0000</pubDate><guid>https://ripx80.de/posts/04-nftables/</guid><description>short update: 2024-04-20
nftables is the modern linux kernel (&amp;gt;= 3.13 nft support) packet classification framework to replace iptables.
iptables is not covered in this essay.
you need such packet filters in firewalls and routers to accept, drop or forward network packets. this post will deal the basics of nftables and show some commands/rules to handle rules and configure this rules in your linux system. in particular, a nixos system and its configuration are discussed but these rules apply to most systems with nftables.</description></item><item><title>requirements</title><link>https://ripx80.de/posts/03-requirements/</link><pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate><guid>https://ripx80.de/posts/03-requirements/</guid><description>introduction long things short:
we are influenced by our environment the more often we have the same thing every day, the more likely they are to become a requirement track yourself what&amp;rsquo;s your hidden requirements, to be aware of stay minimal in life and technical enjoy if you have more at the time, it will not always be like this story #2 with a dull fetch throb against the from weather-garnished oak door i drew attention to myself.</description></item><item><title>Ufleku - the desire</title><link>https://ripx80.de/posts/02-ufleku-recipe/</link><pubDate>Wed, 29 Dec 2021 16:11:02 +0100</pubDate><guid>https://ripx80.de/posts/02-ufleku-recipe/</guid><description>story the desire
under the old oak marked by storms, dozing and slumbering towards the afternoon, i suddenly felt an unpleasant sensation in my left ear, at first i thought it was one of those vivid daydreams that haunted me again and again lately, leading me into dark alleys, fleeing from pursuers and dark figures. i ignored it and tried to continue in this peaceful safety of the old oak, listening to the last autumn leaves, to organize my thoughts, how it should go on and especially where.</description></item><item><title>Kernel Compiling</title><link>https://ripx80.de/posts/01-kernel-compiling/</link><pubDate>Tue, 28 Dec 2021 16:46:50 +0100</pubDate><guid>https://ripx80.de/posts/01-kernel-compiling/</guid><description>Introduction This is a short discurse about self kernel compilation on a arch system. Gentoo users are familiar with this kind of instructions or use the genkernel programm. You can find an article on archlinux
Install kernel sources and headers 1 2 3 pacman -S base-devel # only gcc and make mkdir /usr/src/linux cd /usr/src/linux download the newest kernel release, at this moment it is 4.13.0
1 2 3 wget https://www.</description></item><item><title/><link>https://ripx80.de/posts/drafts/00-ideas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ripx80.de/posts/drafts/00-ideas/</guid><description>ideas 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 https://www.reactivated.net/writing_udev_rules.html udevadm info -a -p /sys/class/net/enp10s0 # get all attrs # services.udev.extraRules = &amp;#39;&amp;#39; # KERNEL==&amp;#34;enp*&amp;#34;, ATTR{address}==&amp;#34;70:85:c2:89:be:b6&amp;#34;, ACTION==&amp;#34;add&amp;#34;, SUBSYSTEM==&amp;#34;net&amp;#34;, SYMLINK+=&amp;#34;eth0&amp;#34; # &amp;#39;&amp;#39;; # wireguard debbuging # modprobe wireguard # echo module wireguard +p &amp;gt; /sys/kernel/debug/dynamic_debug/contro # dmesg -wT | grep wireguard # ip route get 192.</description></item><item><title/><link>https://ripx80.de/posts/drafts/09-satisfactory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ripx80.de/posts/drafts/09-satisfactory/</guid><description>satisfactory container host 1 2 3 4 5 6 interfaces.br0.ipv4.addresses = [{ address = &amp;#34;192.168.178.1&amp;#34;; prefixLength = 24; }]; # container brdige bridges.br0.interfaces = []; containers - port redirection 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 flush ruleset define satisfactory_ports = { 15777, 15000, 7777 } # redirect port to container (with his own ip stack, private network) # ip here because the private network only has ipv4 table ip nat { chain prerouting { type nat hook prerouting priority -100; policy accept; iifname enp10s0 tcp dport 8080 counter dnat to 192.</description></item><item><title/><link>https://ripx80.de/posts/drafts/10-metavoice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ripx80.de/posts/drafts/10-metavoice/</guid><description>metavoice you need cuda support if you have no cuda support you get compile errors and no working server nvidia on nixos 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #hardware.nvidia.package = config.boot.kernelPackages.nvidiaPackages.stable; #550.78-6.10.6 hardware.nvidia.package = config.boot.kernelPackages.nvidiaPackages.beta; # 550.78-6.10.6 #hardware.nvidia.package = config.boot.kernelPackages.nvidiaPackages.latest; # 550.78-6.10.6 #hardware.nvidia.package = config.boot.kernelPackages.nvidiaPackages.production; #550.78-6.10.6 # hardware.nvidia.package = config.boot.kernelPackages.nvidiaPackages.mkDriver { # version = &amp;#34;555.</description></item></channel></rss>