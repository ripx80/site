<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>network on ripx80 onexec</title><link>https://ripx80.de/tags/network/</link><description>Recent content in network on ripx80 onexec</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>ripx80</copyright><lastBuildDate>Mon, 15 Apr 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://ripx80.de/tags/network/index.xml" rel="self" type="application/rss+xml"/><item><title>nftables - basics</title><link>https://ripx80.de/posts/04-nftables/</link><pubDate>Mon, 15 Apr 2024 00:00:00 +0000</pubDate><guid>https://ripx80.de/posts/04-nftables/</guid><description>short update: 2024-04-20
nftables is the modern linux kernel (&amp;gt;= 3.13 nft support) packet classification framework to replace iptables.
iptables is not covered in this essay.
you need such packet filters in firewalls and routers to accept, drop or forward network packets. this post will deal the basics of nftables and show some commands/rules to handle rules and configure this rules in your linux system. in particular, a nixos system and its configuration are discussed but these rules apply to most systems with nftables.</description></item><item><title>wg overhead reminder</title><link>https://ripx80.de/posts/drafts/06-wg-mtu/</link><pubDate>Mon, 15 Apr 2024 00:00:00 +0000</pubDate><guid>https://ripx80.de/posts/drafts/06-wg-mtu/</guid><description>short wg overhead the overhead of wireguard breaks down as follows:
20-byte: ipv4 header or 40 byte ipv6 header 8-byte: udp header 4-byte: type 4-byte: key index 8-byte: nonce n-byte: encrypted data 16-byte: authentication tag so, if you assume 1500 byte ethernet frames, the worst case (ipv6) winds up being 1500-(40+8+4+4+8+16), leaving n=1420 bytes. if you use only ipv4 then n=1440 bytes. but why i set a mtu size of *1380 bytes?</description></item></channel></rss>